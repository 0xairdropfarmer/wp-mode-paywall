// Ensure web3 is available. This could be injected by MetaMask or another Ethereum wallet.
(function ($) {
    $(document).ready(function () {

        if (typeof window.ethereum !== 'undefined') {
            // Initialize web3 using the injected provider from the browser (e.g., MetaMask)
            const web3 = new Web3(window.ethereum);
            $(document).on('click', '#unlockContentButton', async function (e) {
                e.preventDefault();
                let base64Data = '1234560x6080604052348015600f57600080fd5b506107ef8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063befc420614610046578063d55f7fa614610064578063defd1c3d1461006e575b600080fd5b61004e61008a565b60405161005b9190610268565b60405180910390f35b61006c610118565b005b610088600480360381019061008391906103d3565b6101c5565b005b600080546100979061044b565b80601f01602080910402602001604051908101604052809291908181526020018280546100c39061044b565b80156101105780601f106100e557610100808354040283529160200191610110565b820191906000526020600020905b8154815290600101906020018083116100f357829003601f168201915b505050505081565b6000738680ceabcb9b56913c519c069add6bc3494b702090508073ffffffffffffffffffffffffffffffffffffffff16634420e48673daf7bbe20724d2dd7717e0e09a06b572c3a112de6040518263ffffffff1660e01b815260040161017e91906104bd565b6020604051808303816000875af115801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c1919061050e565b5050565b80600090816101d491906106e7565b5050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102125780820151818401526020810190506101f7565b60008484015250505050565b6000601f19601f8301169050919050565b600061023a826101d8565b61024481856101e3565b93506102548185602086016101f4565b61025d8161021e565b840191505092915050565b60006020820190508181036000830152610282818461022f565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102e08261021e565b810181811067ffffffffffffffff821117156102ff576102fe6102a8565b5b80604052505050565b600061031261028a565b905061031e82826102d7565b919050565b600067ffffffffffffffff82111561033e5761033d6102a8565b5b6103478261021e565b9050602081019050919050565b82818337600083830152505050565b600061037661037184610323565b610308565b905082815260208101848484011115610392576103916102a3565b5b61039d848285610354565b509392505050565b600082601f8301126103ba576103b961029e565b5b81356103ca848260208601610363565b91505092915050565b6000602082840312156103e9576103e8610294565b5b600082013567ffffffffffffffff81111561040757610406610299565b5b610413848285016103a5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061046357607f821691505b6020821081036104765761047561041c565b5b50919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104a78261047c565b9050919050565b6104b78161049c565b82525050565b60006020820190506104d260008301846104ae565b92915050565b6000819050919050565b6104eb816104d8565b81146104f657600080fd5b50565b600081519050610508816104e2565b92915050565b60006020828403121561052457610523610294565b5b6000610532848285016104f9565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261059d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610560565b6105a78683610560565b95508019841693508086168417925050509392505050565b6000819050919050565b60006105e46105df6105da846104d8565b6105bf565b6104d8565b9050919050565b6000819050919050565b6105fe836105c9565b61061261060a826105eb565b84845461056d565b825550505050565b600090565b61062761061a565b6106328184846105f5565b505050565b5b818110156106565761064b60008261061f565b600181019050610638565b5050565b601f82111561069b5761066c8161053b565b61067584610550565b81016020851015610684578190505b61069861069085610550565b830182610637565b50505b505050565b600082821c905092915050565b60006106be600019846008026106a0565b1980831691505092915050565b60006106d783836106ad565b9150826002028217905092915050565b6106f0826101d8565b67ffffffffffffffff811115610709576107086102a8565b5b610713825461044b565b61071e82828561065a565b600060209050601f831160018114610751576000841561073f578287015190505b61074985826106cb565b8655506107b1565b601f19841661075f8661053b565b60005b8281101561078757848901518255600182019150602085019450602081019050610762565b868310156107a457848901516107a0601f8916826106ad565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220300ef2577814d95be41fc0fbc41e2485799585d7ecddb3fd06607cf44bbacdc264736f6c63430008190033'
                if (window.ethereum) {
                    try {
                        const web3 = new Web3(window.ethereum);
                        await window.ethereum.enable();  // Request access to account
                        const accounts = await web3.eth.getAccounts();
                        // Define the contract ABI
                        const contractABI = [
                            // Add the ABI for the unlockPost function
                            {
                                "constant": false,
                                "inputs": [
                                    {
                                        "name": "_base64Data",
                                        "type": "string"
                                    }
                                ],
                                "name": "unlockPost",
                                "outputs": [],
                                "payable": false,
                                "stateMutability": "nonpayable",
                                "type": "function"
                            }
                        ];
                        if (accounts.length === 0) {
                            throw new Error("No accounts available to send the transaction.");
                        }

                        const contract = new web3.eth.Contract(contractABI, '0xEa9dD14e06E8b0FA8D6C0DC23821df290c8DF85d');
                        const gasEstimate = await contract.methods.unlockPost(base64Data).estimateGas({ from: accounts[0] });

                        const response = await contract.methods.unlockPost(base64Data).send({ from: accounts[0], gas: gasEstimate });
                        console.log('Transaction response:', response);

                        // After transaction logic here...
                        document.getElementById('hiddenContent').style.display = 'block'; // Unhide the content.
                        document.getElementById('unlockContentButton').style.display = 'none'; // Unhide the content.
                    } catch (error) {
                        console.error('Could not initiate Ethereum transaction', error);
                    }
                } else {
                    console.error('No Ethereum provider detected. Please install MetaMask or another wallet.');
                }
            })
        } else {
            console.error('No Ethereum provider detected. Please install MetaMask or another wallet.');
        }

    });
})(jQuery);